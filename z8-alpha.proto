// z8-alpha
// Main protocol for the z8-satellites, first generation

syntax = "proto3";

import "nanopb.proto";

option java_package = "z8.proto.alpha";
option java_outer_classname = "Z8ProtoAlpha";
option java_multiple_files = true;

message ServerMessage {
  option (nanopb_msgopt).no_unions = true;
  string id = 1 [(nanopb).max_length = 5];
  string barer = 2 [(nanopb).max_length = 32];
  string target = 3 [(nanopb).max_length = 5];
  oneof body {
    WelcomeMessage welcome_message = 4;
    TimeResponse time_response = 5;
    PlayMelody play_melody = 6;
    StopMelody stop_melody = 7;
    ModifyDisplayQueue modify_display_queue = 8;
    DisplayQueueRun display_queue_run = 9;
    ClearDisplayQueue clear_display_queue = 10;
    TokenAwait token_await = 11;
    TokenRead token_read = 12;
    TokenWrite token_write = 13;
    TrustToken trust_token = 14;
    UltralightCAuthentication ultralight_c_authentication = 15;
    UltralightCSecretChange ultralight_c_secret_change = 16;

  }
}

message ClientMessage {
  option (nanopb_msgopt).no_unions = true;
  string id = 1 [(nanopb).max_length = 5];
  string barer = 2 [(nanopb).max_length = 32];
  string source = 3 [(nanopb).max_length = 5];
  oneof body {

    WelcomeMessage welcome_message = 4;
    TimeRequest time_request = 5;
    MelodyPlayed melody_played = 6;
    MelodyStopped melody_stopped = 7;
    DisplayQueueModifyedEvent display_queue_modifyed_event = 8;
    DisplayQueueStartedEvent display_queue_started_event = 9;
    DisplayQueueFinishedEvent display_queue_finished_event = 10;
    DisplayQueueClearedEvent display_queue_cleared_event = 11;
    TokenFoundEvent token_found_event = 12;
    TokenReadEvent token_read_event = 13;
    TokenWrittenEvent token_written_event = 14;
    TokenLoseEvent token_lose_event = 15;
    UltralightCAuthentication ultralight_c_authentication = 16;
    UltralightCSecretChangedEvent ultralight_c_secret_change_event = 17;
    LogMessage log_message = 18;
    
  }
}

// ---- ---- ---- MAIN ---- ---- ----

// Server + Client
message WelcomeMessage {

}

// ---- ---- ---- TIME ---- ---- ----

// Client
// Used to get the current time
message TimeRequest {

}

// Server
// Used to answer the TimeRequest
message TimeResponse {
  fixed64 timestamp = 1;
}

// ---- ---- ---- SOUND ---- ---- ----
// I already taked with Martin about a more accessible interaction
// We are currently looking for solutions involving a mp3 driven
// playback. Work in progress.

// Server
message PlayMelody {
  repeated int32 melody = 1;
}

// Client
message MelodyPlayed {

}

// Server
message StopMelody {

}

// Client
message MelodyStopped {

}

// ---- ---- ---- DISPLAY ---- ---- ----

// Server
message ModifyDisplayQueue {
  enum Operation {
    CLEAR = 0;
    APPEND = 1;
    OVERWRITE = 2;
    PRINT = 3;
  }
  Operation operation = 1; // Requred
  enum Animation {
    NONE = 0;
    SINGLE_LINE = 1;
    ALL_LINES = 2;
  }
  Animation animation = 2; // Ony used for operation = PRINT
  fixed32 line = 3; // Only used for ((operation = PRINT, animation = (SINGLE_LINE | NONE)) | APPEND | OVERWRITE)
  string data = 4 [(nanopb).max_length = 40]; // Only used for operation = (APPEND | OVERRIDE)
  fixed32 position = 5; // Only used for operation = APPEND
  fixed64 timeout = 6; // Requred, will be altered to nearest multible of 10 downwards

}

// Client
// Used to confirm a queue operation
message DisplayQueueModifyedEvent {
  bool success = 1;
}

// Handle the display queue

// Server
// Used to start the queue handling
// Will store the parent messages id and reply
// with a DisplayQueueFinished when finished
message DisplayQueueRun {

}

// Client
// Used to confirm the started queue
message DisplayQueueStartedEvent {

}

// Client
// Used to notify a finished queue, parent id is
// the id used to start the queue
message DisplayQueueFinishedEvent {
  bool success = 1;
}

// Server
// Used to stop and clear the current display queue.
// Parent id will be saved and returnend when operation finished.
message ClearDisplayQueue {

}

// Client
message DisplayQueueClearedEvent {
  bool success = 1;
}


// ---- ---- ---- TOKEN ---- ---- ----
// All token messages (except the TokenAwait initial message) are requied to
// have a valid token id. This id must be checked against the current token present on
// client side.

// Server
// Used to actiate token await process
// Display will not be changed, parent id is saved and used
// when replying with TokenFoundEvent
message TokenAwait {

}

// Client
// Used to inform about found token, id of TokenAwait is used
message TokenFoundEvent {
  string token = 1 [(nanopb).max_length = 14];
  enum TokenType {
    UNKNOWN = 0;
    ULTRALIGHTC = 1;
    CLASSIC = 2;
  }
  TokenType type = 2;
}

// Server
// Used to request a read from a token
// Id will be safed for response with
message TokenRead {
  string token = 1 [(nanopb).max_length = 14];
  int64 page = 2;
  bytes data = 3; //TODO Add default page size
}

// Client
// Used to response to a TokenRead
message TokenReadEvent {
  string token = 1 [(nanopb).max_length = 14];
  bool success = 2;
  int64 page = 3;
  bytes data = 4; //TODO Add default page size
}

// Server
// Used to request a write to a token
message TokenWrite {
  string token = 1 [(nanopb).max_length = 14];
  int32 page = 2;
  bytes data = 3; //TODO Add default page size
}

// Client
// Used to cofirm a write operation
message TokenWrittenEvent {
  string token = 1 [(nanopb).max_length = 14];
  bool success = 2;
}

// Client
// Used to notify about a lost token
message TokenLoseEvent {
  string token = 1 [(nanopb).max_length = 14];
}

// Server
// Used to signalize the devices, that the found token
// is valid and can be trust.
message TrustToken {
  string token = 1 [(nanopb).max_length = 14];
}

//SPECIAL

// Server + Client
// Used to handle the authentification
message UltralightCAuthentication {
  string token = 1 [(nanopb).max_length = 14];
  int32 next_stage = 2;
  bytes data = 3 [(nanopb).max_size = 40];
  bytes randA = 4 [(nanopb).max_size = 40];
  bytes data2 = 5 [(nanopb).max_size = 40];
}

// Server
// Used to request a secret change for a Ultralight C card.
message UltralightCSecretChange {
  string token = 1 [(nanopb).max_length = 14];
  string secret = 2 [(nanopb).max_length = 32];
}

// Client
// Used to confirm a secret change
message UltralightCSecretChangedEvent {
  string token = 1 [(nanopb).max_length = 14];
  bool success = 2;
}

// Client
// Used to redirect a local log message to the server
message LogMessage {
  string source = 1 [(nanopb).max_length = 1];
  enum Level {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
  }
  Level level = 2;
  string message = 3 [(nanopb).max_length = 1];
}
